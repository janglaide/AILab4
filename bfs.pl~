initial_state([0,0]).

final_state([3,_]).
final_state([_,3]).

main():-
    initial_state(State),
    bfs(State-[],[],[]).

bfs(State-[],History,[]):-
    append_cor(History,State,NewHistory),
    findall(X-[State], (search_states(State,X),not(member(X,NewHistory))),[NextState-P|T]),
    bfs(NextState-[P],NewHistory,T).
bfs(State-Path,_,[_]):-
    final_state(State),
    append(Path,State,FinalPath),
    write(FinalPath).
bfs(State-Path,History,[Queue-PQ|Tail]):-
    length(PQ,0), %brackets output problem solver
    append_cor(History,State,NewHistory),
    findall(X-P1, (search_states(State,X),not(member(X,NewHistory)),append(Path,[State],P1)),[NextStates-P|T]),
    append(Tail,[NextStates-P|T],NewQueue),
    bfs(Queue-[PQ],NewHistory,NewQueue).
bfs(State-Path,History,[Queue-PQ|Tail]):-
    append_cor(History,State,NewHistory),
    findall(X-P1, (search_states(State,X),not(member(X,NewHistory)),append(Path,[State],P1)),[NextStates-P|T]),
    append(Tail,[NextStates-P|T],NewQueue),
    bfs(Queue-PQ,NewHistory,NewQueue).
bfs(State-_,History,[Queue-PQ|Tail]):-
    append_cor(History,State,NewHistory),
    bfs(Queue-PQ,NewHistory,Tail).



resolve_path([],_,_):-!.
resolve_path([NextState|T],[State|Path], FinalStates):-
    append_cor([NextState],State,Upd1),
    append(Upd1,Path,Upd2),
    resolve_path(T,[State|Path],_),
    append_cor(FinalStates,Upd2,FinalStates).



append_cor(Queue,[L5,L9],Q):-
    append(Queue,[[L5,L9]],Q).

next_front([State-Move|NextMoves],NextFront,[s(State,[Move|Path])|NF1],History,Path):-
    not(member(State,History)),
    !,
    next_front(NextMoves,NextFront,NF1,History,Path).
next_front([_|NextMoves],NextFront,NF1,History,Path):-
    next_front(NextMoves,NextFront,NF1,History,Path).
next_front([],NextFront,NextFront,_,_).

history(State,History,History):-
    final_state(State),
    !.
history(State,History,[State|History]).

search_states([L5,L9],[NL5,NL9]):-
    state([L5,L9],[NL5,NL9]).

state([L5,L9],[5,L9]):-
    L5 = 0.
state([L5,L9],[L5,9]):-
    L9 = 0.
state([L5,L9],[0,L9]):-
    not(L5 = 0).
state([L5,L9],[L5,0]):-
    not(L9 = 0).
state([L5,L9],[NL5,9]):-
    not(L5 = 0),
    not(L9 = 9),
    L5 + L9 > 9,
    NL5 is L5 + L9 - 9.
state([L5,L9],[0,NL9]):-
    not(L5 = 0),
    not(L9 = 9),
    L5 + L9 =< 9,
    NL9 is L5 + L9.
state([L5,L9],[5,NL9]):-
    not(L5 = 5),
    not(L9 = 0),
    L5 + L9 > 5,
    NL9 is L5 + L9 - 5.
state([L5,L9],[NL5,0]):-
    not(L5 = 5),
    not(L9 = 0),
    L5 + L9 =< 5,
    NL5 is L5 + L9.
